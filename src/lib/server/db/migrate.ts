// Script para aplicar migraciones y crear datos iniciales
// Este archivo se ejecuta para configurar la base de datos

import { drizzle } from 'drizzle-orm/d1';
import { migrate } from 'drizzle-orm/d1/migrator';
import { eq } from 'drizzle-orm';
import { users } from './schema';
import { Argon2id } from 'oslo/password';
import { generateId } from 'lucia';

// Funci√≥n para aplicar migraciones a la base de datos
export async function runMigrations(database: D1Database) {
	console.log('üîÑ Aplicando migraciones...');
	
	// Crear instancia de Drizzle
	const db = drizzle(database);
	
	// Aplicar todas las migraciones pendientes
	await migrate(db, { migrationsFolder: './drizzle' });
	
	console.log('‚úÖ Migraciones aplicadas correctamente');
}

// Funci√≥n para crear el usuario admin inicial
export async function seedAdminUser(database: D1Database) {
	console.log('üå± Creando usuario admin inicial...');
	
	const db = drizzle(database);
	
	// Verificar si ya existe un admin
	const existingAdmin = await db
		.select()
		.from(users)
		.where(eq(users.role, 'admin'))
		.limit(1);
	
	if (existingAdmin.length > 0) {
		console.log('‚ÑπÔ∏è  Usuario admin ya existe, saltando seed');
		return;
	}
	
	// Crear hash de contrase√±a segura
	// En producci√≥n, esto deber√≠a ser una contrase√±a temporal que el admin cambie
	const password = 'admin123'; // ‚ö†Ô∏è Cambiar en producci√≥n
	const hashedPassword = await new Argon2id().hash(password);
	
	// Crear usuario admin
	const adminUser = {
		id: generateId(15), // ID √∫nico de 15 caracteres
		email: 'admin@chambar.com',
		passwordHash: hashedPassword,
		role: 'admin' as const,
		createdAt: new Date()
	};
	
	await db.insert(users).values(adminUser);
	
	console.log('‚úÖ Usuario admin creado:');
	console.log(`   Email: ${adminUser.email}`);
	console.log(`   Contrase√±a: ${password}`);
	console.log('‚ö†Ô∏è  IMPORTANTE: Cambiar la contrase√±a despu√©s del primer login');
}

// Funci√≥n principal que ejecuta migraciones y seed
export async function setupDatabase(database: D1Database) {
	try {
		await runMigrations(database);
		await seedAdminUser(database);
		console.log('üéâ Base de datos configurada correctamente');
	} catch (error) {
		console.error('‚ùå Error configurando base de datos:', error);
		throw error;
	}
}
